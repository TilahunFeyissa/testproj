name: Build Android AAB

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Infisical service token and project ID
      INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
      INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}

      # Environment to fetch (production, staging, development)
      INFISICAL_ENVIRONMENT: production

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Cache node_modules
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      # 4. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 6. Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      # 7. Install Infisical CLI
      - name: Install Infisical CLI
        run: |
          curl -sSL https://github.com/Infisical/infisical/releases/latest/download/install.sh | bash
          export PATH="$HOME/.infisical/bin:$PATH"

      # 8. Pull secrets from Infisical
      - name: Pull secrets
        run: |
          infisical export \
            --token $INFISICAL_TOKEN \
            --project-id $INFISICAL_PROJECT_ID \
            --environment $INFISICAL_ENVIRONMENT \
            --format dotenv \
            --output-file .env

      # 9. Load secrets into environment
      - name: Load secrets
        run: |
          set -a
          source .env
          set +a

      # 10. Decode keystore and prepare JKS
      - name: Decode and prepare keystore (PKCS12 → JKS)
        run: |
          set -e
          mkdir -p android
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/key.bin

          # Detect PKCS12 and convert
          if keytool -list -keystore android/key.bin -storetype PKCS12 -storepass "$ANDROID_KEYSTORE_PASSWORD" >/dev/null 2>&1; then
            echo "Detected PKCS12 — converting to JKS..."
            keytool -importkeystore \
              -srckeystore android/key.bin -srcstoretype PKCS12 -srcstorepass "$ANDROID_KEYSTORE_PASSWORD" \
              -destkeystore android/my-release-key.jks -deststoretype JKS \
              -deststorepass "$ANDROID_KEYSTORE_PASSWORD" -destkeypass "$ANDROID_KEY_PASSWORD" \
              -srcalias "$ANDROID_KEY_ALIAS" -destalias "$ANDROID_KEY_ALIAS" -noprompt
          else
            echo "Not PKCS12 — assuming JKS bytes."
            mv android/key.bin android/my-release-key.jks
          fi

          ls -l android/
          echo "Keystore alias/entries:"
          keytool -list -v -keystore android/my-release-key.jks -storepass "$ANDROID_KEYSTORE_PASSWORD" || true

      # 11. Build the AAB
      - name: Build AAB
        run: |
          cd android
          chmod +x gradlew
          ./gradlew clean bundleRelease \
            -Pandroid.injected.signing.store.file=my-release-key.jks \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            --stacktrace --info

      # 12. Upload the AAB artifact
      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
