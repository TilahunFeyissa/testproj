name: Build Android AAB

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # === LOCAL variables (replace with real values for testing) ===
    env:
      ANDROID_KEY_ALIAS: my-key-alias
      ANDROID_KEY_PASSWORD: my-key-password
      ANDROID_KEYSTORE_PASSWORD: my-keystore-password
      # Put your base64 of the keystore here (one-line). Use >- fold to avoid newlines in YAML.
      ANDROID_KEYSTORE_BASE64: >-
        REPLACE_WITH_YOUR_BASE64_ENCODED_KEYSTORE_SINGLE_LINE

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      # Decode the base64 into a file, detect PKCS12, convert to JKS if necessary
      - name: Decode and prepare keystore (detect + convert PKCS12 → JKS)
        run: |
          set -e
          mkdir -p android
          # decode into a temp file (same bytes regardless of extension)
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/key.bin

          # Try to list as PKCS12:
          if keytool -list -keystore android/key.bin -storetype PKCS12 -storepass "$ANDROID_KEYSTORE_PASSWORD" >/dev/null 2>&1; then
            echo "Detected PKCS12 keystore — converting to JKS..."
            keytool -importkeystore \
              -srckeystore android/key.bin -srcstoretype PKCS12 -srcstorepass "$ANDROID_KEYSTORE_PASSWORD" \
              -destkeystore android/my-release-key.jks -deststoretype JKS -deststorepass "$ANDROID_KEYSTORE_PASSWORD" -destkeypass "$ANDROID_KEY_PASSWORD" \
              -srcalias "$ANDROID_KEY_ALIAS" -destalias "$ANDROID_KEY_ALIAS" -noprompt
          else
            echo "Not PKCS12 (or PKCS12 listing failed) — assuming input is JKS bytes. Writing as JKS."
            mv android/key.bin android/my-release-key.jks
          fi

          # quick checks
          ls -l android/
          echo "Keystore alias/entries:"
          keytool -list -v -keystore android/my-release-key.jks -storepass "$ANDROID_KEYSTORE_PASSWORD" || true

      - name: Build AAB (use injected properties)
        run: |
          cd android
          chmod +x gradlew
          ./gradlew clean bundleRelease \
            -Pandroid.injected.signing.store.file=my-release-key.jks \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            --stacktrace --info

      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
