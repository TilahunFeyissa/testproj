name: Build Android AAB

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      INFISCAL_TOKEN: ${{ secrets.INFISCAL_TOKEN }}

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Cache node_modules
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      # 4. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5. Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 6. Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      # 7. Install Infisical CLI
      - name: Install Infisical CLI
        run: npm install -g @infisical/cli

      # 8. Fetch Android signing secrets from Infisical
      - name: Fetch Android secrets
        shell: bash
        run: |
          set -e
          # Login with service token
          infisical login --service-token "$INFISCAL_TOKEN"

          # Export Android secrets to env vars
          export ANDROID_KEYSTORE_BASE64=$(infisical get ANDROID_KEYSTORE_BASE64)
          export ANDROID_KEYSTORE_PASSWORD=$(infisical get ANDROID_KEYSTORE_PASSWORD)
          export ANDROID_KEY_PASSWORD=$(infisical get ANDROID_KEY_PASSWORD)
          export ANDROID_KEY_ALIAS=$(infisical get ANDROID_KEY_ALIAS)

          # Optional: quick sanity check
          echo "Keystore base64 length: ${#ANDROID_KEYSTORE_BASE64}"
          echo "Alias: $ANDROID_KEY_ALIAS"

          # Export for subsequent steps
          echo "ANDROID_KEYSTORE_BASE64=$ANDROID_KEYSTORE_BASE64" >> $GITHUB_ENV
          echo "ANDROID_KEYSTORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD" >> $GITHUB_ENV
          echo "ANDROID_KEY_PASSWORD=$ANDROID_KEY_PASSWORD" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS=$ANDROID_KEY_ALIAS" >> $GITHUB_ENV

      # 9. Decode keystore and prepare JKS
      - name: Decode and prepare keystore
        shell: bash
        run: |
          set -e
          mkdir -p android
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/key.bin

          if keytool -list -keystore android/key.bin -storetype PKCS12 -storepass "$ANDROID_KEYSTORE_PASSWORD" >/dev/null 2>&1; then
            echo "Detected PKCS12 keystore — converting to JKS..."
            keytool -importkeystore \
              -srckeystore android/key.bin -srcstoretype PKCS12 -srcstorepass "$ANDROID_KEYSTORE_PASSWORD" \
              -destkeystore android/my-release-key.jks -deststoretype JKS \
              -deststorepass "$ANDROID_KEYSTORE_PASSWORD" -destkeypass "$ANDROID_KEY_PASSWORD" \
              -srcalias "$ANDROID_KEY_ALIAS" -destalias "$ANDROID_KEY_ALIAS" -noprompt
          else
            echo "Not PKCS12 — assuming JKS bytes."
            mv android/key.bin android/my-release-key.jks
          fi

          ls -l android/
          echo "Keystore alias/entries:"
          keytool -list -v -keystore android/my-release-key.jks -storepass "$ANDROID_KEYSTORE_PASSWORD" || true

      # 10. Build AAB
      - name: Build AAB
        shell: bash
        run: |
          cd android
          chmod +x gradlew
          ./gradlew clean bundleRelease \
            -Pandroid.injected.signing.store.file=my-release-key.jks \
            -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
            --stacktrace --info

      # 11. Upload artifact
      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
